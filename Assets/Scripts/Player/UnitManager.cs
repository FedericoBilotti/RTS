using System.Collections.Generic;
using System.Linq;
using Structures;
using Structures.Storages;
using Units;
using Units.Formations;
using Units.Resources;
using Units.Villagers;
using UnityEngine;
using Utilities;

namespace Player
{
    public class UnitManager : SingletonAutoGenerated<UnitManager>
    {
        [SerializeField] private RectTransform _selectionBox;

        private FormationManager _formationManager;
        private IController _controller;
        private UnitOrderManager _unitOrderManager;
        private UnitVisualManager _unitVisualManager;
        private UnitSelectorManager _unitSelectorManager;

        private readonly HashSet<Unit> _selectedUnits = new();

        // Estas listas es para gestionar mejor que está haciendo cada villager.
        private readonly List<Villager> _villagers = new();
        private readonly List<Villager> _villagersInFood = new();
        private readonly List<Villager> _villagersInWood = new();
        private readonly List<Villager> _villagersInGold = new();

        protected override void InitializeSingleton()
        {
            base.InitializeSingleton();

            _unitOrderManager = new UnitOrderManager(this);
            _unitVisualManager = new UnitVisualManager(_selectionBox);
            _unitSelectorManager = new UnitSelectorManager(this);
            _controller = new UnitController(_unitVisualManager, _unitSelectorManager, _unitOrderManager);

            _formationManager = GetComponent<FormationManager>();
        }

        private void Update() => _controller.ArtificialUpdate();
        private void FixedUpdate() => _controller.ArtificialFixedUpdate();

        public bool IsUnitSelected(Unit unit) => _selectedUnits.Contains(unit);

        public void MoveToStorage(IStorage storage)
        {
            IEnumerable<Villager>
                    villagers = _selectedUnits.OfType<Villager>().ToArray(); // Crear listas de cada tipo específico, asi no se filtra cada vez que necesita lista de villagers.

            if (!villagers.Any()) return;

            foreach (Villager selectedUnit in villagers)
            {
                selectedUnit.SetStorage(storage);
            }
        }

        public void SetResourceToWorkUnits(Resource resource)
        {
            IEnumerable<Villager>
                    villagers = _selectedUnits.OfType<Villager>().ToArray(); // Crear listas de cada tipo específico, asi no se filtra cada vez que necesita lista de villagers.

            if (!villagers.Any()) return;

            foreach (Villager selectedUnit in villagers)
            {
                selectedUnit.SetResource(resource);
            }
        }

        public void MoveUnitsInFormation(Vector3 desiredPosition)
        {
            List<Vector3> positions = _formationManager.GetActualFormation(desiredPosition, _selectedUnits.ToList());

            int i = 0;
            foreach (Unit selectedUnit in _selectedUnits)
            {
                Vector3 position = positions[i];
                selectedUnit.SetDestination(position);
                i = (i + 1) % positions.Count;
            }
        }

        public void MoveUnits(Vector3 desiredPosition)
        {
            foreach (Unit selectedUnit in _selectedUnits)
            {
                selectedUnit.SetDestination(desiredPosition);
            }
        }

        public void AddUnit(Unit unit)
        {
            _selectedUnits.Add(unit);
            unit.UnitVisual.SelectUnit();
        }

        public void RemoveUnity(Unit unit)
        {
            if (!_selectedUnits.Contains(unit)) return;

            _selectedUnits.Remove(unit);
            unit.UnitVisual.DeselectUnit();
        }

        public void ClearUnits()
        {
            foreach (Unit selectedUnit in _selectedUnits)
            {
                selectedUnit.UnitVisual.DeselectUnit();
            }

            _selectedUnits.Clear();
        }

        private void OnDrawGizmos()
        {
            _controller?.DrawGizmo();
        }
    }
}