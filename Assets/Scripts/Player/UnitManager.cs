using System;
using System.Collections.Generic;
using System.Linq;
using EventSystem.Channel;
using Manager;
using Structures.Storages;
using Units;
using Units.Formations;
using Units.Resources;
using Units.Villagers;
using UnityEngine;
using Utilities;

namespace Player
{
    public class UnitManager : SingletonAutoGenerated<UnitManager>
    {
        private IController _controller;
        private FormationManager _formationManager;
        private UnitOrderManager _unitOrderManager;
        private UnitSelectorManager _unitSelectorManager;

        private readonly HashSet<Unit> _selectedUnits = new();

        private readonly List<Villager> _villagers = new();         // Cada vez que se crea un villager sea añade acá.
        private readonly List<Villager> _selectedVillagers = new(); // Villagers seleccionados.
        private readonly Dictionary<ResourcesManager.ResourceType, List<Villager>> _villagersByResource = new();
        
        [Header("Events")]
        [SerializeField] private ResourceChannel _onAddWorkVillager;
        [SerializeField] private ResourceChannel _onRemoveWorkVillager;

        protected override void InitializeSingleton()
        {
            base.InitializeSingleton();

            _unitOrderManager = new UnitOrderManager(this);
            _unitSelectorManager = new UnitSelectorManager(this);

            foreach (ResourcesManager.ResourceType resource in Enum.GetValues(typeof(ResourcesManager.ResourceType)))
            {
                _villagersByResource[resource] = new List<Villager>();
            }

            _formationManager = GetComponent<FormationManager>();
        }

        private void Start() => _controller = new UnitController(UnitVisualManager.Instance, _unitSelectorManager, _unitOrderManager);

        private void Update() => _controller.ArtificialUpdate();
        private void FixedUpdate() => _controller.ArtificialFixedUpdate();

        public bool IsUnitSelected(Unit unit) => _selectedUnits.Contains(unit);

        #region Movement

        public void SetStorage(IStorage storage)
        {
            if (_selectedVillagers.Count == 0) return;

            foreach (Villager selectedUnit in _selectedVillagers)
            {
                selectedUnit.SetWork(null);
                selectedUnit.SetStorage(storage);
            }
        }

        public void SetResourceToWorkUnits(IWork work)
        {
            if (_selectedVillagers.Count == 0) return;

            foreach (Villager selectedUnit in _selectedVillagers)
            {
                selectedUnit.SetStorage(null);
                selectedUnit.SetWork(work);
            }
        }

        public void MoveUnitsInFormation(Vector3 desiredPosition)
        {
            List<Vector3> positions = _formationManager.GetActualFormation(desiredPosition, _selectedUnits.ToList());

            int i = 0;
            foreach (Unit selectedUnit in _selectedUnits)
            {
                Vector3 position = positions[i];
                selectedUnit.SetDestination(position);
                i = (i + 1) % positions.Count;
            }
        }

        public void MoveUnits(Vector3 desiredPosition)
        {
            foreach (Unit selectedUnit in _selectedUnits)
            {
                selectedUnit.SetDestination(desiredPosition);
            }
        }

        #endregion

        #region Units

        public void AddUnit(Unit unit)
        {
            _selectedUnits.Add(unit);
            unit.UnitVisual.SelectUnit();
        }

        public void RemoveUnity(Unit unit)
        {
            if (!_selectedUnits.Contains(unit)) return;

            _selectedUnits.Remove(unit);
            unit.UnitVisual.DeselectUnit();
        }

        public void ClearUnits()
        {
            foreach (Unit selectedUnit in _selectedUnits)
            {
                selectedUnit.UnitVisual.DeselectUnit();
            }

            _selectedUnits.Clear();
            _selectedVillagers.Clear();
        }

        #region Villagers

        public void AddVillager(Villager villager) => _villagers.Add(villager);
        public void RemoveVillager(Villager villager) => _villagers.Remove(villager);

        public void AddSelectedVillager(Villager villager) => _selectedVillagers.Add(villager);
        public void RemoveSelectedVillager(Villager villager) => _selectedVillagers.Remove(villager);

        public void AddWorkingVillager(Villager villager, ResourcesManager.ResourceType resourceType)
        {
            if (!_villagersByResource.TryGetValue(resourceType, out List<Villager> workingVillagers))
            {
                Debug.LogWarning("Resource not found: " + resourceType);
                return;
            }

            workingVillagers.Add(villager);
            _onAddWorkVillager.Invoke(new ResourceEvent(workingVillagers.Count, resourceType));
        }

        public void RemoveWorkingVillager(Villager villager, ResourcesManager.ResourceType resourceType)
        {
            if (!_villagersByResource.TryGetValue(resourceType, out List<Villager> workingVillagers))
            {
                Debug.LogWarning("Resource not found: " + resourceType);
                return;
            }

            workingVillagers.Remove(villager);
            _onRemoveWorkVillager.Invoke(new ResourceEvent(workingVillagers.Count, resourceType));
        }

        #endregion

        #endregion

        private void OnDrawGizmos() => _controller?.DrawGizmo();
    }
}