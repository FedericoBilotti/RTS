using System;
using System.Collections.Generic;
using EventSystem.Channel;
using UnityEngine;
using Utilities;

namespace Manager
{
    public class ResourcesManager : SingletonAutoGenerated<ResourcesManager>
    {
        [SerializeField] private int _initialFoodAmount = 150;
        [SerializeField] private int _initialWoodAmount = 100;
        [SerializeField] private int _initialGoldAmount = 0;
        
        [Header("Events")]
        [SerializeField] private ResourceChannel _onAddResource;
        [SerializeField] private ResourceChannel _onRemoveResource;

        private readonly Dictionary<ResourceType, int> _resourceAmount = new();

        protected override void InitializeSingleton()
        {
            base.InitializeSingleton();

            foreach (ResourceType resourceType in Enum.GetValues(typeof(ResourceType)))
            {
                _resourceAmount[resourceType] = 0;
            }
        }

        private void Start()
        {
            AddResourceAmount(ResourceType.Food, _initialFoodAmount);
            AddResourceAmount(ResourceType.Wood, _initialWoodAmount);
            AddResourceAmount(ResourceType.Gold, _initialGoldAmount);
        }

        public void AddResourceAmount(ResourceType resourceType, int amount)
        {
            _resourceAmount[resourceType] += amount;
            _onAddResource.Invoke(new ResourceEvent(_resourceAmount[resourceType], resourceType));
        }

        public void RemoveResourceAmount(ResourceType resourceType, int amount)
        {
            _resourceAmount[resourceType] -= amount;
            _onRemoveResource.Invoke(new ResourceEvent(_resourceAmount[resourceType], resourceType));
        }

        public int GetResourceAmount(ResourceType resourceType) => _resourceAmount[resourceType];

        public enum ResourceType
        {
            Wood,
            Food,
            Gold,
            All
        }
    }
}