using System;
using System.Collections.Generic;
using EventSystem;
using UnityEngine;
using Utilities;

namespace Manager
{
    public class ResourcesManager : SingletonAutoGenerated<ResourcesManager>
    {
        [SerializeField] private ResourceChannel _onAddResource;
        [SerializeField] private ResourceChannel _onRemoveResource;
        
        private readonly Dictionary<ResourceType, int> _resourceAmount = new();

        protected override void InitializeSingleton()
        {
            base.InitializeSingleton();

            foreach (ResourceType resourceType in Enum.GetValues(typeof(ResourceType)))
            {
                _resourceAmount[resourceType] = 0;
            }
        }
        
        public void AddResource(ResourceType resourceType, int amount)
        {
            _resourceAmount[resourceType] += amount;
            _onAddResource.Invoke(new ResourceEvent(_resourceAmount[resourceType], resourceType));
        }
        
        public void RemoveResource(ResourceType resourceType, int amount)
        {
            _resourceAmount[resourceType] -= amount;
            _onRemoveResource.Invoke(new ResourceEvent(_resourceAmount[resourceType], resourceType));
        }
        
        public int GetResourceAmount(ResourceType resourceType) => _resourceAmount[resourceType];

        public enum ResourceType
        {
            Wood,
            Food,
            Gold,
            All
        }
    }
}