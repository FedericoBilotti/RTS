using System.Collections.Generic;
using System.Linq;
using Structures;
using Structures.Storages;
using Units;
using UnityEngine;
using Utilities;

namespace Manager
{
    public class GameManager : SingletonAutoGenerated<GameManager>
    {
        private readonly List<Center> _centers = new();
        private readonly List<IStorage> _storages = new();
        
        [SerializeField] private LayerMask _unitLayer;
        [SerializeField] private LayerMask _unitStructureLayer;
        [SerializeField] private LayerMask _resourceLayer;
        [SerializeField] private LayerMask _treesLayer;
        [SerializeField] private LayerMask _groundLayer;
        
        public LayerMask GetUnitLayer() => _unitLayer;
        public LayerMask GetUnitStructureLayer() => _unitStructureLayer;
        public LayerMask GetResourceLayer() => _resourceLayer;
        public LayerMask GetTreesLayer() => _treesLayer;
        public LayerMask GetGroundLayer() => _groundLayer;

        public void AddCenter(Center center)
        {
            _centers.Add(center);
        }

        public void RemoveCenter(Center center)
        {
            _centers.Remove(center);
        }
        
        public void AddStorage(IStorage storage)
        {
            _storages.Add(storage);
        }

        public void RemoveStorage(IStorage storage)
        {
            _storages.Remove(storage);
        }

        public Center NearCenter(Unit unit)
        {
            // Tmb compararia los q son de mi facción con un .Where
            return _centers.OrderBy(center => (center.transform.position - unit.transform.position).sqrMagnitude).FirstOrDefault();
        }

        public IStorage NearStorage(Unit unit, ResourcesManager.ResourceType desiredStorage)
        {
            // Tmb compararia los q son de mi facción
            return _storages.Where(x => x.GetStorageType == desiredStorage).OrderBy(x => Vector3.Distance(unit.transform.position, x.Position)).FirstOrDefault();
        }
    }
}