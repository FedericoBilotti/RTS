using System;
using System.Collections.Generic;
using UnityEngine;

namespace Utilities
{
    public class ServiceLocator : SingletonAutoGenerated<ServiceLocator>
    {
        private static readonly Dictionary<Type, object> _services = new();

        public static void RegisterService<T>(T service)
        {
            Type type = typeof(T);

            if (!_services.TryAdd(type, service)) Debug.LogError($"Service {type} already registered");
        }
        
        public bool TryGetService<T>(out T t)
        {
            Type type = typeof(T);

            if (_services.TryGetValue(type, out var service))
            {
                t = (T)service;
                return true;
            }

            t = default;
            return false;
        }

        public static T GetService<T>()
        {
            Type type = typeof(T);

            if (!_services.TryGetValue(type, out var service))
            {
                throw new Exception($"Service {type} not found");
            }
            
            return (T)service;
        }
    }
}